<?php

/**
 * License: GNU General Public License
 *
 * Copyright (c) 2009 TechDivision GmbH.  All rights reserved.
 * Note: Original work copyright to respective authors
 *
 * This file is part of TechDivision GmbH - Connect.
 *
 * TechDivision_Model is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * TechDivision_Model is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
 * USA.
 *
 * @package TechDivision_Model
 */

/**
 * Interface of all Manager objects.
 *
 * @package TechDivision_Model
 * @author Tim Wagner <t.wagner@techdivision.com>
 * @copyright TechDivision GmbH
 * @link http://www.techdivision.com
 * @license GPL
 */
interface TechDivision_Model_Interfaces_Manager
{

    /**
     * This method checks if the passed event exists, if
     * yes the callback is added to the internal list.
     *
     * @param string $event Holds the events name
     * @param object $object
     * 		Holds the object the function should be invoked on if
     * 		the event is fired
     * @param string $function
     * 		Holds the name of the function that should be invoked
     * 		if the event is fired
     * @return void
     * @throws TechDivision_Model_Exceptions_UnknownEventExeception
     * 		Is thrown if the event with the passed name is not registered
     */
    public function addCallbackFunction($event, $object, $function);

    /**
     * This method starts a new transaction.
     *
     * @return void
     */
	public function beginTransaction();

    /**
     * This method writes the data of all statements executed
     * in the actual transaction startet with beginTransaction()
     * to the database.
     *
     * @return void
     */
	public function commitTransaction();

    /**
     * This method executes the query passed as parameter
     * and returns the number of affected rows.
     *
     * @param string $query The query that should be executed
     * @param array $parameter The parameters for the prepared statement
     * @param array $parameterTypes
     * 		The types of the parameters for the prepared statement
     * @return integer The number of rows affected by the query
     * @throws TechDivision_Model_Exceptions_ExecuteException
     * 		Is thrown when the query can not be executed
     */
    public function execute(
        $query,
        array $parameter = array(),
        array $parameterTypes = array());

    /**
     * This method returns the ID generated by a query on a table with a column
     * having the AUTO_INCREMENT attribute. If the last query wasn't an INSERT
     * or UPDATE statement or if the modified table does not have a column with
     * the AUTO_INCREMENT attribute, this function will return zero.
     *
     * @return integer The generated ID
     */
    public function getLastInsertId();

    /**
     * This method executes the query passed as parameter
     * and returns the number of affected rows.
     *
     * @param string $query The query that should be executed
     * @param array $parameter The parameters for the prepared statement
     * @param array $parameterTypes
     * 		The types of the parameters for the prepared statement
     * @return integer The number of rows affected by the query
     * @throws TechDivision_Model_Exceptions_ExecutionException
     * 		Is thrown when the query can not be executed
     */
    public function executeStmt(
        MySQLi_STMT $stmt,
        array $parameter = array(),
        array $parameterTypes = array());

    /**
     * This method returns the reference
     * to the conainer.
     *
     * @return TechDivision_Model_Interfaces_Container
     * 		Holds the container reference
     */
    public function getContainer();

    /**
     * Returns the data source.
     *
     * @return TechDivision_Util_Interfaces_DataSource Holds the data source
     */
    public function getDataSource();

    /**
     * Returns the name of the used data source.
     *
     * @return string Holds the name of the used data source
     */
    public function getDataSourceName();

    /**
     * Returns the connection status.
     *
     * @return boolean
     * 		Is TRUE if the database connection is established, else FALSE
     */
    public function isConnected();

    /**
     * This method prepares the query passed as parameter
     * and returns the prepared query.
     *
     * @param string $query The query that should be prepared
     * @return MySQLi_STMT The prepared query
     * @throws TechDivision_Model_Exceptions_PrepareException
     * 		Is thrown when the query can not be prepared
     */
    public function prepareStmt($query);

    /**
     * This method executes the query passed as parameter
     * and returns the result as a MySQLi_Result object.
     *
     * Either the constant MYSQLI_USE_RESULT or MYSQLI_STORE_RESULT depending
     * on the desired behavior. By default, MYSQLI_STORE_RESULT is used.
     *
     * If you use MYSQLI_USE_RESULT all subsequent calls will return error
     * commands out of sync unless you call mysqli_free_result()
     *
     * @param string $query The query that should be executed
     * @param array $parameter The parameters for the prepared statement
     * @param array $parameterTypes
     * 		The types of the parameters for the prepared statement
     * @param string $resultType
     * 		The type of the objects to be initialized and returned
     * @param integer $resultMode The MySQLi query mode that should be used
     * @return array The result of the query
     * @throws TechDivsion_Model_Exceptions_QueryException
     * 		Is thrown when the query is not valid
     * @see TechDivision_Model_Interfaces_Manager::query($query, array $parameter = array(), array $parameterTypes = array(), $resultMode = MYSQLI_STORE_RESULT)
     */
    public function query(
        $query,
        array $parameter = array(),
        array $parameterTypes = array(),
        $resultType = 'stdClass',
        $resultMode = MYSQLI_STORE_RESULT);

    /**
     * This method executes the query passed as parameter
     * and returns the result as an ArrayList.
     *
     * @param $query The query that should be executed
     * @param array $parameter The parameters for the prepared statement
     * @param array $parameterTypes
     * 		The types of the parameters for the prepared statement
     * @return ArrayList The result of the query
     * @throws TechDivision_Model_Exceptions_QueryException
     * 		Is thrown when the query is not valid
     */
    public function queryStmt(
        MySQLi_STMT $stmt,
        array $parameter = array(),
        array $parameterTypes = array());

    /**
     * This method rolls back all statements executed in the
     * actual transaction startet with beginTransaction().
     *
     * @return void
     */
	public function rollbackTransaction();
}